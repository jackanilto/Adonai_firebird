unit ULogin;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.Imaging.jpeg, Vcl.Imaging.pngimage;

type
  TFrmLogin = class(TForm)
    Image1: TImage;
    GrpBxLogin: TGroupBox;
    Image2: TImage;
    Label1: TLabel;
    Label2: TLabel;
    BtnLogin: TButton;
    BtnSair: TButton;
    EdtUser: TEdit;
    EdtSenha: TEdit;
    AdonaiSoftware: TLabel;
    Label3: TLabel;
    procedure BtnSairClick(Sender: TObject);
    procedure BtnLoginClick(Sender: TObject);
    procedure EdtSenhaKeyPress(Sender: TObject; var Key: Char);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure EdtUserKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FrmLogin: TFrmLogin;

implementation

{$R *.dfm}

uses UDM, UPrincipal;

 //inicio do login
procedure TFrmLogin.BtnLoginClick(Sender: TObject);
//Verifica o dados na tabela Acesso
begin
 DM.TblAcesso.Open();
    if (DM.TblAcesso.Locate('USUARIO', EdtUser.Text, [])) and (DM.TblAcesso.Locate('SENHA',EdtSenha.Text,[])) then
    Begin
      FrmPrincipal.Show;
      FrmLogin.Hide;
    End
// Verifica se foram preencidos os campos Login e Senha e exibe o alerta
   else
   if (EdtUser.Text ='') and (EdtSenha.Text = '')then
   ShowMessage ('Preencha os campos Login e Senha') // Caso esteja vazio

   else
   MessageDlg('Login ou senha inválidos', mtError, [mbOk], 0); // Caso de digitação errada
end;
  //Fim do codigo login
procedure TFrmLogin.BtnSairClick(Sender: TObject);
begin
Application.Terminate;
end;

procedure TFrmLogin.EdtSenhaKeyPress(Sender: TObject; var Key: Char);
begin
 if Key = #13 then            // Define o comando enter
    BtnLoginClick(Sender);     // Atribui a função do boatao entrar ao enter
end;

procedure TFrmLogin.EdtUserKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
// define tab on press enter para navegar entre dbedit´s (Login)
if key = vk_return then SelectNext(ActiveControl,True,True);
end;

procedure TFrmLogin.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
// define tab on press enter para navegar entre dbedit´s  (Senha)
if key = vk_return then SelectNext(ActiveControl,True,True);
end;



//Procedure para pegar a versao do programa
 procedure GetBuildInfo(var V1, V2, V3, V4: word);
var
  VerInfoSize, VerValueSize, Dummy: DWORD;
  VerInfo: Pointer;
  VerValue: PVSFixedFileInfo;
begin
  VerInfoSize := GetFileVersionInfoSize(PChar(ParamStr(0)), Dummy);
  if VerInfoSize > 0 then
  begin
      GetMem(VerInfo, VerInfoSize);
      try
        if GetFileVersionInfo(PChar(ParamStr(0)), 0, VerInfoSize, VerInfo) then
        begin
          VerQueryValue(VerInfo, '\', Pointer(VerValue), VerValueSize);
          with VerValue^ do
          begin
            V1 := dwFileVersionMS shr 16;
            V2 := dwFileVersionMS and $FFFF;
            V3 := dwFileVersionLS shr 16;
            V4 := dwFileVersionLS and $FFFF;
          end;
        end;
      finally
        FreeMem(VerInfo, VerInfoSize);
      end;
  end;
end;

function GetBuildInfoAsString: string;
var
  V1, V2, V3, V4: word;
begin
  GetBuildInfo(V1, V2, V3, V4);
  Result := IntToStr(V1) + '.' + IntToStr(V2) + '.' +
    IntToStr(V3) + '.' + IntToStr(V4);
end;

end.
